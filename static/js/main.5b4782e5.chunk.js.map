{"version":3,"sources":["App.js","database/todo.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["App","useState","JSON","parse","localStorage","getItem","loadTodos","todos","setTodos","toggleTodoComplete","id","map","todo","isCompleted","useEffect","setItem","stringify","saveTodos","activeTodos","filter","e","completedTodos","className","onSubmit","preventDefault","todoItem","formValue","target","elements","value","uuidv4","title","concat","name","placeholder","type","length","onClick","classNames","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.5b4782e5.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport classNames from \"classnames\";\nimport { loadTodos, saveTodos } from \"./database/todo\";\n\n/*\ntodo = {\n  id: uuid,\n  title: string,\n  isCompleted: boolean,\n}\n*/\n\nexport default function App() {\n  const [todos, setTodos] = useState(() => loadTodos());\n\n  function createTodo(todoItem) {\n    setTodos(todos.concat(todoItem));\n  }\n\n  function toggleTodoComplete(id) {\n    setTodos((todos) =>\n      todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            isCompleted: !todo.isCompleted,\n          };\n        }\n        return todo;\n      })\n    );\n  }\n\n  function handleDeleteTodo(id) {\n    setTodos((todos) => {\n      return todos.filter((todo) => todo.id !== id);\n    });\n  }\n\n  // Setiap ada perubahan `todos`, simpan ke local storage:\n  useEffect(() => {\n    saveTodos(todos);\n  }, [todos]);\n\n  const activeTodos = todos.filter((e) => !e.isCompleted);\n  const completedTodos = todos.filter((e) => e.isCompleted);\n\n  return (\n    <div className=\"p-5\">\n      <h1 className=\"text-2xl\">Todo App Paling Keren!</h1>\n\n      {/* Form untuk Create New Todo */}\n      <form\n        className=\"mt-3\"\n        onSubmit={(e) => {\n          e.preventDefault();\n          const formValue = e.target.elements.todo.value;\n          e.target.elements.todo.value = \"\";\n          createTodo({ id: uuidv4(), title: formValue, isCompleted: false });\n        }}\n      >\n        <input\n          name=\"todo\"\n          className=\"border-2\"\n          placeholder=\"Create New Todo...\"\n        />\n        <button type=\"submit\" className=\"bg-green-200 mx-2 px-2 rounded-lg\">\n          Buat Baru\n        </button>\n      </form>\n\n      {/* Tampilkan Datanya */}\n      <div className=\"mt-3\">\n        <h4>Harus dikerjakan:</h4>\n        {activeTodos.length !== 0 ? (\n          activeTodos.map((todo) => (\n            <div key={todo.id} className=\"flex items-center gap-2\">\n              <button onClick={() => toggleTodoComplete(todo.id)}>\n                &#9711;\n              </button>\n              <div\n                className={classNames(\"font-extralight\", {\n                  \"line-through\": todo.isCompleted,\n                  \"text-gray-600\": todo.isCompleted,\n                })}\n              >\n                {todo.title}\n              </div>\n            </div>\n          ))\n        ) : (\n          <div className=\"text-gray-500 text-xs\">\n            Todo list kosong. Have a great day ðŸ˜Š !\n          </div>\n        )}\n      </div>\n\n      {/* Tampilkan item yang sudah complete */}\n      {completedTodos.length !== 0 && (\n        <div className=\"mt-3\">\n          <h4>Selesai:</h4>\n          {completedTodos.map((todo) => (\n            <div\n              key={todo.id}\n              className=\"group relative flex items-center gap-2\"\n            >\n              <button onClick={() => toggleTodoComplete(todo.id)}>\n                &#9711;\n              </button>\n              <div\n                className={classNames(\"font-extralight\", {\n                  \"line-through\": todo.isCompleted,\n                  \"text-gray-600\": todo.isCompleted,\n                })}\n              >\n                {todo.title}\n              </div>\n              <button\n                className=\"group-hover:block hidden\"\n                onClick={() => handleDeleteTodo(todo.id)}\n              >\n                <span className=\"text-red-800\">&#x2715;</span>\n              </button>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","// Fungsi untuk mengambil daftar `todos` dari local storage.\nexport function loadTodos() {\n  return JSON.parse(localStorage.getItem(\"todos\")) ?? [];\n}\n\n// Fungsi untuk menyimpan daftar `todos` ke dalam local storage.\nexport function saveTodos(todos) {\n  localStorage.setItem(\"todos\", JSON.stringify(todos));\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}